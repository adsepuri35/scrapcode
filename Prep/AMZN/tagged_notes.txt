Leetcode 146 - LRU Cache:
    - Use doubly linked list with empty head and tail pointers
    - define class Node for doubly linked list node
    - unordered map to keep track of nodes
    - keep track of cache size with map size
    - helper add, delete functions

Leetcode 3 - Longest Substring Without Repeating Characters
    - Have unordered map to keep track of last occurrence of each Characters
    - Have left and right pointers
    - Update left pointer if there are duplicates in the current window and the last occurrence of the current character is within the current window. So we don't go backwards

Leetcode 3371 - Identify the Largest Outlier in an Array
    - Intuition - essentially, if we take the sum of all the special numbers. If we add one of the outliers to the sum, it will double. If we subtract an outlier, the remaining sum should be 2 times the other special number, which we should see in the map
    - we can have a sum = 0
    - Pass 1 - sum up all of the integers and add to the freq of the current num * 2

Leetcode 49 - Group Anagrams
    - Approach 1 - essentially sort the strings by characters and add to a hashmap. Time = O(NKlogK), Space = O(NK)
    - Approach 2 - use a 26 char array to keep track of char frequencies, construct a string and separate frequencies, add to hashmap. Time = Space = O(NK)

Leetcode 42 - Trapping Rain Water
    - The amount of water a cell holds is equal to the minimum of the tallest cell to the left and the right, minus the height of the current cell
    - DP Approach - use 2 vectors to keep track of the tallest cell on the left and right of each location. Then simply iterate over both arrays and calculate.
    - Two pointers Approach - 2 pointers from opposite sides of vector: left, right. Essentially we realize if we have a tall bar at one end, the other sides, max is going to contribute to the answer and vice versa. If a location is taller than the max in that direction, its not trapping any water, so we just set it to the new max. Otherwise, we calculate

Leetcode 347 - Top K Frequent Elements
    - Aim to achieve time complexity < O (n log n). Essentially we have a priority queue with a max capacity of k elements and we reduce the complexity to O (n log k) where k is the max number of elements. Space complexity = O (n + k).

Leetcode 295 - Find Median from Data Stream
    - Have 2 priority queues, one max heap for the lower half (root is closest to median), another min heap for upper half. The size difference of the 2 heaps should be max 1, never 2, so implement a self balancing aspect. We add a number to the lower half first, then take the root/greatest element and push to the upper pq if it is greater than the smallest element in it. Then we check if the queues are unbalanced and rebalance them.

Leetcode 2272 - Substring with Largest Variance
    - Understand Kadane's Algorithm (O(1) Space) DP Solution. We keep track of the current max ending at the current index we are on, if the sum drops below 0, we reset the sum to 0 and move forward. Maintain local max and global max.
    - Approach - use modified Kadane's algorithm approach. Count character frequencies. Go through every possible pair of characters max 26^2. Count the number of major and minor chars. We only update the global max when the minor count is greater than 0 because the minor char has to be in the substring. We also keep track of the number of minor chars remaining because if there are no remaining minor chars and we reset the major and minor char count to 0, we won't be able to update the global max again. Reset only when the minor count is greater than major count and the number of remaining minor characters is at least 1.

Leetcode 767 - Reorganize string
    - Intuition - If the frequency of a character is greater than the size of the string divided by 2, we can't rearrange the string, so return "".
    - Approach - keep track of character frequences and put them in max heap. Define a vector the size of the string. In all of the even spots, place one character until you run out. If there are more spots left, fill them with the next character and so on, do the same with the odd spots. We do this because the characters won't be adjacent.

Leetcode 6 - Zigzag Conversion
    - Intuition - if there are only one rows or more rows than characters in the string, the resulting string is just the string parameter itself.
    - Approach - Have a string vector with an empty string for each vector. Just oscillate a counter from 1 to numRows and add the corresponding character to the appropriate string in the vector.
    Concatenate all of the strings in the vector to get the resulting vector.

Leetcode 55 - Jump Game
    - Approach - Use a greedy approach while traversing from the end of the array. Define the earliest position, if the earliest position is reachable from an earlier location, update it. If the earliest position is position zero at the end, return true (we can reach the last index).

Leetcode 1152 - Analyze User Website Visit Pattern
    - All just implementation. Make a map with user keys and value of a map with the timestamp and website. Go through all users and make patterns of all the websites possible with a triple nested loop. We use maps instead of unordered maps because ORDER MATTERS. Make sure there are no duplicate patterns. Then go through each pattern and find the one with the most users and return.
    - Time Complexity - O(U * K^3)
    - Space Complexity - O(U * W)

Leetcode 227 - Basic Calculator II
    - Approach 1 - use a stack. Problem is O(n) complexity
    - Approach 2 - Keep track of a current number, answer, last sign, and the last number. Check if the current character is a digit. If so, add to current num, otherwise, check the last sign, if the last sign is + or -, add the last number to the answer and update it to the current num. If not, either multiply the lastNum or divide it by currNum. Update sign too.

AMZN Leadership Principles:
    - Customer Obsession - Start with customers and work backwards. Work vigorously to keep customer trust.
    - Ownership - Leaders are owners. Think long-term. Act on behalf of the company.
    - Invent & Simplify - Externally aware and look for new ideas everywhere. 
    - Learn and Be Curious - Never stop learning
    - Hire & Develop the Best - Recognize exceptional talent. 
    - Insist on the Highest Standards - Raising the bar and delivering high quality products.
    - Think Big - Think differently and look around corners to better serve customers.
    - Bias for Action - Speed matters. Calculated risk-taking is valued
    - Frugality - Accomplish more with less.
    - Earn Trust - Listen attentively and treat other respectfully.
    - Dive Deep - stay connected to details. Be skeptical.
    - Have Backbone; Disagree and Commit - Challenge decisions. Have conviction and be tenacious.
    - Deliver Results - deliver high quality results on time.

Leetcode 215. Kth Largest Element in an Array
    - Find the minimum and maximum value in the array. Create a new array the size of the difference between the min and max. Count the frequencies of the numbers. Then start from the end of the array and find the kth largest element.

Leetcode 3366 - Minimize Array Sum:

int minimizeSum(vector<int>& nums, int k, int op1, int op2) {
    int n = nums.size();
    vector<pair<int, int>> op1Impact, op2Impact;

    // Calculate the impact of Operation 1 and Operation 2 for each index
    for (int i = 0; i < n; i++) {
        int op1Result = (nums[i] + 1) / 2; // Operation 1 result: divide and round up
        int op2Result = (nums[i] >= k) ? nums[i] - k : nums[i]; // Operation 2 result: subtract k if possible
        
        op1Impact.push_back({nums[i] - op1Result, i}); // Impact = reduction by Operation 1
        op2Impact.push_back({nums[i] - op2Result, i}); // Impact = reduction by Operation 2
    }

    // Sort based on reduction impact (larger reductions come first)
    sort(op1Impact.rbegin(), op1Impact.rend()); // Sort descending
    sort(op2Impact.rbegin(), op2Impact.rend());

    // Keep track of which indices have been used for operations
    vector<bool> usedOp1(n, false), usedOp2(n, false);

    // Apply Operation 1 to the top 'op1' indices
    for (int i = 0; i < op1 && i < op1Impact.size(); i++) {
        int idx = op1Impact[i].second;
        nums[idx] = (nums[idx] + 1) / 2;
        usedOp1[idx] = true;
    }

    // Apply Operation 2 to the top 'op2' indices (avoid already modified indices)
    for (int i = 0; i < op2 && i < op2Impact.size(); i++) {
        int idx = op2Impact[i].second;
        if (nums[idx] >= k && !usedOp2[idx]) { // Check conditions
            nums[idx] -= k;
            usedOp2[idx] = true;
        }
    }

    // Compute the resulting sum
    int totalSum = 0;
    for (int num : nums) {
        totalSum += num;
    }
    return totalSum;
}

Leetcode 207 - Course Schedule:

bool dfs(int node, vector<vector<int>>& adj, vector<bool>& visit, vector<bool>& inStack) {
    // If the node is already in the stack, we have a cycle.
    if (inStack[node]) {
        return true;
    }
    if (visit[node]) {
        return false;
    }
    // Mark the current node as visited and part of current recursion stack.
    visit[node] = true;
    inStack[node] = true;
    for (auto neighbor : adj[node]) {
        if (dfs(neighbor, adj, visit, inStack)) {
            return true;
        }
    }
    // Remove the node from the stack.
    inStack[node] = false;
    return false;
}

bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
    vector<vector<int>> adj(numCourses);
    for (auto prerequisite : prerequisites) {
        adj[prerequisite[1]].push_back(prerequisite[0]);
    }

    vector<bool> visit(numCourses);
    vector<bool> inStack(numCourses);
    for (int i = 0; i < numCourses; i++) {
        if (dfs(i, adj, visit, inStack)) {
            return false;
        }
    }
    return true;
}

General Notes:
    - Pay closer attention to base/edge cases