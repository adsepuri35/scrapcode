System Design:

APIs

API - set of rules through which software entities communicate

REST: Review

RPC - allows execution of command in remote machine. Write code that runs on another computer. This API is more thought of as an action. Only used for internal communication. When communicating with other machines, it's easier for errors to occur.

GraphQL - structure data in graph relationships. People using the service decide what they need. Mostly used for mobile applications. Front end devs can craft their own request to get/modify info without dealing with the 
backend stuff. One weakness is that it requires more initial setup


Databases:

SQL - composes of separate tables holding connecting info. Relational. each row reflects data entry and each column is a specific field. Can craft queries using SQL -> more time efficient.

Preferred when customers want up-to-date info even if there are delays. Always show right value.

SQL uses ACID for high consistency:
Atomicity - changes complete in entirety without failure.
Consistency - internally consistent. Certain parts of DB get locked when data is being written, so other requests wait. 
Isolation - all read/write requests unimpacted by other transactions
Durability - if transaction fails, data not lost

SQL DB's - slower to write into than NoSQL dbs, NoSQL have slower reads 

B-Trees - divide space into pages. Each page is traditionally 4 KB in size. If page too large, it's repartitioned to point to new children pages and the values are sorted into them.

When we need strong consistency, there will be higher latencies. Let's say that we have a messaging app, and a user requests data while a write operation is being performed, because there is a lock placed on the field, it will take longer to get data.

Because SQL has fixed schema, mixed data complicates db organization.


NoSQL - nested key-value store. Catch-all term for non-relational DBs

Eventual consistency - client writes data to primary node and is eventually replicated to other notes.

Types:
- key value - scales through usage
- document dbs - similar to key value stores. can perform aggregate searches (complex queries) across data and store in multiple formats. ex. JSON (most common)
- columnar dbs - info stored in tables. Denormalized data (redundant data) for better query performance. Indexing done with columns. Most efficient when queries involve computing the same value types across multiple values
- graph dbs - store complicated node-edge relationships. Easy graph traversal and modification

NoSQL - faster to write, slower for reads. Operate with underlying LSMT 

Why the write/read convention. Imagine a situation where u have a table, and u need to write very fast. It might take longer to write the data in the corresponding table cell. But just writing it in a log based format is faster. But reading from the log-based format can take longer.

Implementation more complex in implementation.

Scaling is easier in NoSQL (increase paid capacity) than SQL

Less suitable for strong consistency. More limited in efficient queries


When you have structured relationships or need strong consistency - use SQL, otherwise use NoSQL


Scaling:

Vertical scaling - improving current infrastructure. Doesn't require you to change current network/architecture. 
Disadvantages - computers have hardware limitations, so upgrading past a certain point is really expensive or impossible. If the system fails, everything fails because you are more reliant on each individual node.

Horizontal scaling - building systems between multiple computers. 3 types: database, compute, caching

Database scaling:
sharding - sharding larger DBs into smaller DBs. You need hash functions to identify which sharded DBs data is stored in.


CAP theorem: Consistency, Availability, Partition tolerance.
Partition tolerance - in case of network failure, system still works


Web authentication + security:
authentication - verifying user identity

Passwords: Don't have a DB with username-password store. Because if compromised, all login info is corrupted

Hash functions change a password to a hashed value. When a user logs in with their username and password, the username is used to find the user table hash value and the password is converted to a hash value using the hash function. If the 2 hash value is matched, the user is authorized.

Rainbow table - lookup table with common passwords and variations.

Salting - instead of hashing password, add some random values to the password and hash that.

Don't implement hash function, salt yourself - use secure libraries

Use HTTPS to ensure credentials aren't passed in as plain text and intercepted. Don't use automatic logging so password text isn't present as logs.

Session token - token generated so users can track that they're signed in. You can check for this session token in a cookie on subsequent requests. Session token should be salted and treated like a password. Come with expiration date, but tokens can be rotated in the background. Shorter expirations times make it more secure.

Secure all traffic with HTTPS - secure data transfer between user and website

JSON Web Tokens - encodes user access like session tokens, but can indicate permissions

Public key (generally available) encrypts data. Private key is kept secret and decrypts data.

Cookie - text string that represents a key and sends back to the server upon a request.

server creates cookie -> cookie sent to browser where it is stored -> upon revisit, cookie sent to server -> server verifies cookie data and authenticates and personalizes experience


Load balancing techniques:
Round robin - self explanatory
Least connection - send to machine with minimum response time
Hash function - decide a way to distribute based on a set methodology


Cache patterns:
Cache aside - most popular. If cache miss, takes data from main mem and puts in cache
Write through - write data to cache and to main memory
Write-back - write data to cache and asynchronously write to main memory. Data is put in queue
LRU cache - because caches have limited memory, time stamps are tracked and the least recently used data is evicted.


Async system: client sends request and doesn't wait for message to be delievered. 
Message queues are used as an intermediary to not overload DBs and cause other issues.
Examples: Kafka


Consistent hashing - distribute keys in distributed storage system

Store media in blob footage


Messaging apps:

Websockets (TCP) - maintain open connection with server (2-way connection). This is better than consistent polling. Have multiple API servers that are fed by a load balancer upon user requests. 

APIs feed into a message queue

We want to be able to shard our database. Availability > consistency - write back policy for decreased latency. NoSQL databases have built-in replication and sharding abilities

Blob storage - store images/videos + add CDN to cache some of these objects for faster retrieval
User table - user id + password (encrypted)

L2: built on top of L1 blockchain to improve speed, scalability, and efficiency. Process transactions off main chain to decrease congestion + increase throughput.
Ex:
State channels - enables off-chain transactions between two parties.
Sidechains - independent blockchains that interact with the main chain (L1) through a two-way peg.
Rollups - L2 scaling solution that bundles multiple transactions into a single transaction on the main chain.
Plasma chains - L2 scaling solution that uses a hierarchical structure to process transactions.