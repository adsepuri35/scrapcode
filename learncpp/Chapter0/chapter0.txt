Chapter 0:

0.2 - machine code is not compatible between CPU families. Assembler translate assembly programs into machine language. Assembly programs, like machine language, is not compatible between CPU families. Compiler reads source codde and translates to a lower level language (ex. assembly or machine language). The mahcine language files are combined into an executable file (containing machine language instructions) that can be run or distributed. Running executable files doesn't require the compiler to be installed. Interpreter is a program that directly executes instructions in the source code. Interpreters are usually more flexible than compilers but less efficient. This also means the interpreter has to be installed on every machine the program will be run on. High-level languages are designed with portability in mind.

0.5 - 
C++ compiler goes through each source code file in the program and checks syntax and translates code into machine language instructions. The instructions are stored in an intermediate file called an object file. The object file also includes info about linker and debugging.

Linker kicks in after compiler. It combines object files are produces executable file (called linking). It ensures cross-file dependencies are resolved. The Linker can also capable linking library files. Library files are collections of precompiled code packaged for reuse. Most C++ linkers are configured to link in the standard library by default

Compile CLI Command:
g++ -o <name-of-output-file> <source file>.cpp

0.9 -
build configuration/target - collection of project settings that determines how your IDE builds the project. Decides executable name, directories to look for, debugging info, how to make the compiler optimize the program, etc.

debug configuration - turns off all optimization. Makes program larger and slower but easier to debug. 

release configuration - used when releasing program to the public. Optimized for size and performance (no debugging info). Useful for testing code performance.


0.10 - 
compilers implement their own changes to the language to enhance compatibility with other versions of the language. Compiler-specific behaviors are called compiler extensions.

Writing programs that use compiler extensions create programs incompatible with C++ standard. Meaning, programs built using non-standard compilers will not compile on other compilers or run properly.

0.11 - 
diagnostic error - means compiler has decided to halt compilation and indicate it can proceed or the error is really serious.
diagnostic warning - compiler has decided not to halt compilation. Compilation proceeds.

Whether a compiler emits a diagnostic message or error is entirely up to the specific compiler and can vary. 

0.12
The versions name correspond with the publication year.
Ex:
2011 - C++11
2017 - C++17
2020 - C++20

It is common to choose a language standard 1 or 2 versions back from the latest so the best practices for the more recent versions are understood.