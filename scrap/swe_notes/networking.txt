Topics:
The five-layer Internet architecture (Application, Transport, Network, Data Link, Physical)
TCP/IP protocols
Web protocols (HTTP/HTTPS)
Network programming basics (sockets, client-server models)
Routing and addressing (IP addressing, subnets)
Congestion control and error handling
Ethernet and wireless networking basics
Network security fundamentals
Key performance concepts (latency, throughput, bandwidth)
UDP
DNS
ARP



TCP/IP Textbook:

Chapter 1:

WAN = Wide Area Network = Internet is a huge WAN

Packet switching - chunks/packets of digital info comprising of bytes are carried through the network kind of independently.
Multiplexing - chunks from different sources/senders are mixed together and pulled apart.

When packets are receieved at a packet switch, they're stored in buffer memory or a queue and processed with FCFS.

Datagram - type of packet where all identifying info of the source and destination resides inside the packet instead of packet switches. 
This allows for connectionless networks.

OSI Model -
Physical defines methods for moving info across a communication medium (cable or phone line)
Link - establish connectivity to a neighbor sharing the medium
Network - Packet format that uses different type of link layer netwroks. Addressing scheme for routing algos. 
Transport - provides flow of data between sessions Session - sessions(ongoing interactions between apps), connection initiation, checkpointing
Presentation layer - format conversion
Application - apps do their own implementations

TCP:
Sequence (SEQ) numbers - track what is subnets
Acknowledgement (ACK) numbers - track what is received

SEQ/ACK numbers are a measure of bytes  

SEQ number + number of Bytes
ACK = SEQ + # bytes
SEQ = previous ACK + # of bytes
...

Each byte can be identified with the SEQ number + byte #

So ACK # means its saying that its received everything until that byte number

TCP caches everything sent for duration of "Retransmission Timeout". If no ACK is received, segment is resent.

Initially, TCP sent an ACK after received segment.
Delayed acknowledgements - send ACK every other segment.
ACKs are cumulative
In the event of an odd # of packets sent, ACK will be sent after 500ms of receiving a packet

Window size limits how much unacknowledged data can be sent

Window size is sent in each segment.
This means the window size can be updated dynamically (Flow control).

TCP is bidirectional - both peers can send data
Both peers have a SEQ # to track bytes sent
Both peers have an ACK # to track bytes receieved 

Initial Sequence Numbers (ISN) - randomly chosen by sender.
Must be shared when connection is established (3-way handshake)

TCP connection starts with 3-way handshake (4 events):
A -> B - SYN with ISN of XOR
B -> A - ACK with X + 1 (Happen in same packet)
B -> A - SYN with ISN of Y (Happen in same packet)
A -> B - ACK with Y + 1

SYN
SYN ACK
ACK

Phantom byte - ACK number increases even when no bytes have been sent (during handshake and closure)
Phantom bytes help differentiate between ACK messages

ACK flag turned on in every message except for the first message

TCP has 2 options for closing a connection
Graceful method - FIN flags
Ungraceful method - RST flags

Graceful method: 4-way closure
A -> B - I have FINished sending data, last sequence # X
B -> A - ACK FIN with ACK # X + 1
B -> A - FIN with last SEQ # Y
A -> B - ACK receiving FIN with ACK Y + 1

FIN 
ACK
FIN
ACK

Ungraceful closing: 1-way
A <-> B - Something went wrong... sending a RESET flag

RST is unacknowledged

TCP socket is identified by a 4-tuple of source IP, source port, destination IP, destination port

Checksum - helps detect errors in transmitted TCP segment. 
The sender computes a 16-bit checksum using the segments contents (header + payload). Puts the checksum in TCP header.
Receiver performs the same checksum calculation and checks to see if it matches the checksum in the header.

Keepalive - 
optional mechanism to detect if TCP connection is still active or if the remote host is responsive.
If data isn't sent for a while, system sends a keepalive probe (empty TCP segment). Receiver must respond with an ACK

AIMD - congestion control algorithm. Dynamically adjusts sending rates
2 phashes:
Additive Increase (AI) - gradually increases the transmission rate when network is stable
Multiplicative decrease (MD) - sharpy reduce rate when congestion detected.

Urgent pointer - sender can indicate "urgent data" in the stream, notifiying receiver to process certain data immediately. Priority data pretty much

SACK - features to improve retransmission by allowing a receiver to selectively acknowledge non-contiguous receieved data blocks. Helps avoid unnecessary retransmissions.
Reduces the number of packets sender has to resend.

Addressing out of order packets - TCP buffers out of order data until missing segments arrive. 

Fast retransmit - sender can detect and retransmit lost packets without waiting for a timeout.

Ex. if duplicate out of order packets are sent and  duplicate acks are received, the sender retransmits the missing segment.

RTO calculation -
Measure round-trip time.
Different algos exits for it and it can be changed dynamically.

WSCALE (Window Scale) - option to allow TCP to support larger receive windows than the standard 16-bit window. Specifies scale factor. Better for higher throughput, more latent systems.

TIME_WAIT - ensures safe closure of connections. After closing a connection, TCP keeps the socket in TIME_WAIT for twice the max segment lifetime (~60 sec). This is so stray packets from old connection expire before ports are reused.

UDP: 

Not connection-oriented
No Confirmation of Delivery
No Flow Control

UDP is ideal for:
- apps with small resquests and responses. ex. DNS (2 packets)
- apps with built-in delivery confirmation
- apps with live or streamed content (latest / real-time packet > older dropped packet)

DNS:

Domain Name System

DNS resolves domain names to I.P. addresses
DNS server will look through its databases to map the domain name to IP address

Resolver server - ISP (internet service provider). 
Computer will look through its cache memory to see if the domain name is there.  If not -> Resolver -> Root server

Root server - 13 sets (top of the DNS heirarchy)

TLD server - Top Level Domain Server. Stores the address info for top level domains (.com, .net, .etc)

Authoritative Name Server - know everything about the domain (including IP address)

DNS caching avoids repeated lookups when accessing a frequently accessed domain

DNS zones - spaces to allow distributed management of DNS namespace. A zone contains the domain records that a specific org/admin has authority over.

DNS namespace is organized as a heirarchal inverted tree with the root at the top. Below are TLDs (.com, .net, etc.). Then 2nd level domains and subdomains. This structure allows for efficient name resolution.