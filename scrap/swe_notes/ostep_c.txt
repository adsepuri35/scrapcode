27 - Thread API

Creating thread:
- pointer to structure of type pthread_t
- function pointer

pthread_join():
- specify which thread to wait for. 
- pointer to return value you expect to get back.

int pthread_mutex_lock(pthread_mutex_t * mutex)

Each thread has its own stack, so don't return pointers to locally allocated variables.

28 - Locks

A lock is a variable. It must be declared.

Spin-waiting - wasting time waiting for another thread to release a lock

Review Test and Set and basic spin locks.

Test and set - atomic hardware instruction
lock = 1 means in use
lock = 0 means free
Returns the old value of the lock. Basically if the lock has value 0 (meaning it's free), it'll return 0 and if it is held, it will return 1 until when it is free for a moment when it will return 0 and break out of the loop.

Spin locks aren't super fair by nature. Bad for single CPU (cycles wasted if preempted within critical section) but work better on multiple CPUs.

TestandSet is interchangeable with CompareAndSwap

Ticket lock:
FetchAndAdd - each thread has a ticket value. This introduces more fairness compared to previous methods.

yield() - thread calls to give up CPU and let another thread run. running -> ready.

yield() can be costly in multiprocessor scenarios because of expensive context switches.

3 states (running, ready, blocked)

Can use a queue to keep track of waiting threads.

Avoid spin locks when possible.  

29 - Lock based data structures

Counters:

Approximate counters - one logical counter represented by numerous local physical counters, 1 per CPU core, and a single global counters.

4 CPUS -> 4 local counters, 1 global. 

Also locks, one for each local counter and 1 for global.

Basically each CPU can update its own counter without contention. Then periodically add the local counter value to the global counter (determined by threshold S).

Bigger threshold = more likely to be less correct in precise counter value. 
Lower threshold = behaves more like exact counter.

Concurrent Linked Lists

Concurrent Queues - use a dummy node to help separate head and tail operations

30 - Condition variables

Threads might want to check a condition before continuing execution.

Condition variable - explicit queue that threads can put themselves on when some state of execution (condition) is not as desired (waiting on execution).

pthread_cond_t c; // c is a condition variable
wait() - thread wishes to put itself to sleep
signal() - thread changed something in the program and wants to wake up a sleeping thread

wait takes the mutex as the parameter to release the lock and put the calling thread to sleep (atomically)

covering condition - broadcast to all waiting threads to wake them up. Do this when you don't know what thread to wake up. Threads you don't want to wake up will simply check their conditions that are false and go back to sleep.

31 - Semaphores

Semaphore - object with integer value that we can manipulate with two routines: sem_wait() and sem_post(). The initial value of the semaphore determines its behavior.

sem_wait() - decrement the value of semaphore by 1, wait if value of semaphore s is negative
sem_post() - increment the value of the semaphore s by one, if >= 1 threads are waiting, wake one

if value of semaphore = negative, abs(value) is the number of waiting threads.

Binary semaphores = locks
Initial value = 1

Semaphores can be used to order events in a concurrent program. (Parent, child threads)

Reader-Writer Lock: Let's say we have a list. We can do insert or lookup operations. Any number of lookup operations can happen as long as there is no write operation going on. So the thread trying to write has to wait for all the reading threads to finish before continuing execution. (More overhead)

Semaphores can also be used for admissions control to limit the number of threads executing some code at once.